apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
  labels:
    app.kubernetes.io/version: 0.0.7
    app.kubernetes.io/name: item-aggregator
  name: item-aggregator
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/version: 0.0.7
      app.kubernetes.io/name: item-aggregator
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scheme: http
        prometheus.io/scrape: "true"
        prometheus.io/path: /q/metrics
      labels:
        app.kubernetes.io/version: 0.0.7
        app.kubernetes.io/name: item-aggregator
    spec:
      containers:
      - args:
        - -Dquarkus.http.host=0.0.0.0
        - -Djava.util.logging.manager=org.jboss.logmanager.LogManager
        - -jar
        - /deployments/quarkus-run.jar
        command:
        - java
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: JAVA_APP_JAR
          value: /deployments/quarkus-run.jar
        - name: KAFKA_SSL_TRUSTSTORE_LOCATION
          value: /deployments/certs/server/ca.p12
        - name: KAFKA_SSL_TRUSTSTORE_TYPE
          value: PKCS12
        - name: KAFKA_SSL_KEYSTORE_LOCATION
          value: /deployments/certs/user/user.p12
        - name: KAFKA_SSL_KEYSTORE_TYPE
          value: PKCS12
        - name: KAFKA_SECURITY_PROTOCOL
          value: SSL
        - name: KAFKA_USER
          value: tls-user
        - name: KAFKA_CERT_PWD
          valueFrom:
            secretKeyRef:
              key: ca.password
              name: kafka-cluster-ca-cert
        - name: USER_CERT_PWD
          valueFrom:
            secretKeyRef:
              key: user.password
              name: tls-user
        envFrom:
        - configMapRef:
            name: item-aggregator-cm
        - configMapRef:
            name: inventory-kafka-cm
        image: quay.io/ibmcase/item-aggregator
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /q/health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        name: item-aggregator
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /q/health/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        volumeMounts:
        - mountPath: /deployments/certs/server
          name: kafka-cert
          readOnly: false
          subPath: ""
        - mountPath: /deployments/certs/user
          name: user-cert
          readOnly: false
          subPath: ""
      serviceAccount: item-aggregator
      volumes:
      - name: kafka-cert
        secret:
          defaultMode: 384
          optional: true
          secretName: kafka-cluster-ca-cert
      - name: user-cert
        secret:
          defaultMode: 384
          optional: true
          secretName: tls-user
