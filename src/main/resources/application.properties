quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=INFO
quarkus.log.console.enable=true
quarkus.http.port=8080
quarkus.ssl.native=true
quarkus.swagger-ui.always-include=true
quarkus.openshift.expose=true

%prod.quarkus.openshift.env-vars.KAFKA_USER.value=es-tls-user
%prod.quarkus.openshift.env-vars.SECURE_PROTOCOL.value=SSL
%dev.quarkus.openshift.env-vars.SECURE_PROTOCOL.value=SASL_SSL
quarkus.openshift.env-vars.KAFKA_BROKERS.value=light-es-kafka-bootstrap.integration.svc:9093

quarkus.openshift.env-vars.KAFKA_CERT_PATH.value=/deployments/certs/server/ca.p12
quarkus.openshift.env-vars.KAFKA_PASSWORD.secret=es-tls-user
quarkus.openshift.env-vars.KAFKA_PASSWORD.value=user.password
quarkus.openshift.env-vars.KAFKA_CERT_PWD.secret=light-es-cluster-ca-cert
quarkus.openshift.env-vars.KAFKA_CERT_PWD.value=ca.password
quarkus.openshift.env-vars.USER_CERT_PATH.value=/deployments/certs/user/user.p12
quarkus.openshift.env-vars.USER_CERT_PWD.secret=es-tls-user
quarkus.openshift.env-vars.USER_CERT_PWD.value=user.password
quarkus.openshift.mounts.es-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.es-cert.secret-name=light-es-cluster-ca-cert
quarkus.openshift.mounts.user-cert.path=/deployments/certs/user
quarkus.openshift.secret-volumes.user-cert.secret-name=es-tls-user

# quarkus.container-image.tag=0.0.5
# quarkus.container-image.name=item-aggregator


group.min.session.timeout.ms=7000
hostname=${POD_IP:localhost}
# Kafka admin config
kafka.bootstrap.servers=${KAFKA_BROKERS}
kafka.security.protocol=${SECURE_PROTOCOL}
kafka.ssl.protocol=TLSv1.2
%dev.kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username\=\"${KAFKA_USER}\" password\=\"${KAFKA_PASSWORD}\";
%dev.kafka.sasl.mechanism=SCRAM-SHA-512
# Only if TLS is used for authentication instead of scram
%prod.kafka.ssl.keystore.location=${USER_CERT_PATH}
%prod.kafka.ssl.keystore.password=${USER_CERT_PWD}
%prod.kafka.ssl.keystore.type=PKCS12

quarkus.kafka-streams.bootstrap-servers=${KAFKA_BROKERS}
quarkus.kafka-streams.security.protocol=${SECURE_PROTOCOL}
quarkus.kafka-streams.ssl.protocol=TLSv1.2
%dev.quarkus.kafka-streams.sasl.mechanism=SCRAM-SHA-512
%dev.quarkus.kafka-streams.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username\=\"${KAFKA_USER}\" password\=\"${KAFKA_PASSWORD}\";
quarkus.kafka-streams.ssl.truststore.location=${KAFKA_CERT_PATH}
quarkus.kafka-streams.ssl.truststore.password=${KAFKA_CERT_PWD}
quarkus.kafka-streams.ssl.truststore.type=PKCS12
# Only if TLS is used for authentication instead of scram
%prod.quarkus.kafka-streams.ssl.keystore.location=${USER_CERT_PATH}
%prod.quarkus.kafka-streams.ssl.keystore.password=${USER_CERT_PWD}
%prod.quarkus.kafka-streams.ssl.keystore.type=PKCS12
quarkus.kafka-streams.application-server=${hostname}:8080

quarkus.kafka-streams.auto.offset.reset=earliest
quarkus.kafka-streams.health.enabled=true
quarkus.kafka-streams.consumer.session.timeout.ms=7000
quarkus.kafka-streams.consumer.heartbeat.interval.ms=200
quarkus.kafka-streams.application-id=item-aggregator
quarkus.kafka-streams.topics=items,inventory
quarkus.kafka-streams.default.deserialization.exception.handler=org.apache.kafka.streams.errors.LogAndContinueExceptionHandler


mp.messaging.outgoing.inventory-channel.connector=smallrye-kafka
mp.messaging.outgoing.inventory-channel.topic=inventory
mp.messaging.outgoing.inventory-channel.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.inventory-channel.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer


mp.messaging.incoming.item-channel.connector=smallrye-kafka
mp.messaging.incoming.item-channel.topic=items
mp.messaging.incoming.item-channel.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.item-channel.value.deserializer=ibm.gse.eda.inventory.infrastructure.ItemDeserializer
mp.messaging.incoming.item-channel.group.id=item-aggregator





